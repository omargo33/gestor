package view.plantilla;import java.io.IOException;import java.util.Date;import java.util.logging.Level;import java.util.logging.Logger;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Clase para dar un timeout personalizado a aplicaciones ADF. * * @author omargo33@hotmail.com */public class BaseSessionExpiryFilter implements Filter {    private FilterConfig _filterConfig = null;    /**     * Metodo para inizializar el filtro.     *     * @param filterConfig     * @throws ServletException     */    public void init(FilterConfig filterConfig) throws ServletException {        _filterConfig = filterConfig;    }    /**     * Metodo para detruir el filtro.     *     */    public void destroy() {        _filterConfig = null;    }    /**     * Filtro que lee los parametros de direccionamiento y de tiempo de espera.     *     * @param request     * @param response     * @param chain     * @throws IOException     * @throws ServletException     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,                                                                                                     ServletException {        long tiempoTranscurrido = 0;        long tiempoInactividad = 0;        String requestedSession = ((HttpServletRequest) request).getRequestedSessionId();        String currentWebSession = ((HttpServletRequest) request).getSession(false).getId();        boolean sessionOk = currentWebSession.equalsIgnoreCase(requestedSession);        try {            Object date = ((HttpServletRequest) request).getSession().getAttribute("date");            if (date == null) {                date = "0";            }            tiempoTranscurrido = new Date().getTime() - Long.parseLong(String.valueOf(date));            tiempoInactividad = Long.parseLong(String.valueOf(_filterConfig.getInitParameter("timeOut"))) * 60 * 1000;        } catch (Exception e) {            tiempoTranscurrido = 0;            tiempoInactividad = 0;        }        if ((!sessionOk && requestedSession != null) || tiempoTranscurrido > tiempoInactividad) {            ((HttpServletRequest) request).getSession().invalidate();            try {                currentWebSession = ((HttpServletRequest) request).getSession().getId();            } catch (Exception e) {                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)                    .log(Level.WARNING, "doFilter - currentWebSession " + e.toString());            }            ((HttpServletResponse) response).sendRedirect(_filterConfig.getInitParameter("urlRedirect"));        } else {            try {                ((HttpServletRequest) request).getSession().setAttribute("date", new Date().getTime());            } catch (Exception e) {                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.WARNING, "doFilter - chain " + e.toString());            }            try {                chain.doFilter(request, response);            } catch (Exception e) {                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.WARNING, "doFilter - chain base " + e.toString());            }        }    }}