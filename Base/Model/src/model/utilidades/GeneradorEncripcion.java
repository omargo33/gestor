package model.utilidades;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.logging.Level;import java.util.logging.Logger;import javax.xml.bind.DatatypeConverter;import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;/** * Objetos para encriptar en el sistema. * * @author omargo33@hotmail.com */public class GeneradorEncripcion {    public final static String REALM_WEBLOGIC_12 = "WLS12";    public final static String REALM_GLASSFISH_5 = "GF5";    /**     * Metodo para cifrar.     *     * @param semilla     * @param cadena     * @return     */    public static String cifrar(String semilla, String cadena) {        if (cadena == null)            return cadena;        try {            StandardPBEStringEncryptor standardPBEStringEncryptor = new StandardPBEStringEncryptor();            standardPBEStringEncryptor.setPassword(semilla);            return standardPBEStringEncryptor.encrypt(cadena);        } catch (Exception e) {            Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, e.toString());            return null;        }    }    /**     * Metodo para encriptar un codigo.     *     * @param cadena     * @return     */    public static String decifrar(String semilla, String cadena) {        if (cadena == null)            return cadena;        try {            StandardPBEStringEncryptor standardPBEStringEncryptor = new StandardPBEStringEncryptor();            standardPBEStringEncryptor.setPassword(semilla);            return standardPBEStringEncryptor.decrypt(cadena);        } catch (Exception e) {            Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, e.toString());            return cadena;        }    }    /**     * Metodo para encriptar en el nivel de Weblogic 12c     *     * @param cadena     * @return     */    @SuppressWarnings("oracle.jdeveloper.java.semantic-warning")    public static String SHA1Weblogic12c(String cadena) {        String respuesta = "";        try {            respuesta = "{SHA-1}" + new sun.misc.BASE64Encoder().encode(java.security                                                                            .MessageDigest                                                                            .getInstance("SHA1")                                                                            .digest(cadena.getBytes()));        } catch (NoSuchAlgorithmException e) {            Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, e.toString());        }        return respuesta;    }    /**     * MEtodo para encriptar en el nivel de Glassfish 5.     *     * @param cadena     * @return     */    public static String SHA256Glassfish5(String cadena) {        String respuesta = null;        try {            MessageDigest digest = MessageDigest.getInstance("SHA-256");            byte[] hash = digest.digest(cadena.getBytes("UTF-8"));            respuesta = DatatypeConverter.printHexBinary(hash);        } catch (Exception e) {            Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, e.toString());        }        return respuesta;    }    /**     * Metodo para generar encripcion para servidores.     *     * @param servidor     * @param cadena     * @return     */    public static String cifrarRealm(String servidor, String cadena) {        if (servidor.compareTo(REALM_WEBLOGIC_12) == 0) {            return SHA1Weblogic12c(cadena);        } else {            if (servidor.compareTo(REALM_GLASSFISH_5) == 0) {                return SHA256Glassfish5(cadena);            }        }        return "";    }}