package model.bc;

import java.math.BigDecimal;

import java.sql.ResultSet;

import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import model.bc.common.Modulo;
import model.bc.modulo.Archivo;
import model.bc.modulo.Grupo;
import model.bc.modulo.Notificaciones;
import model.bc.modulo.Parametros;
import model.bc.modulo.Reporte;
import model.bc.modulo.Rol;
import model.bc.vista.ArchivoViewImpl;
import model.bc.vistaNoDML.InformacionViewNoDMLImpl;
import model.bc.vistaNoDML.MenusPermisosViewNoDMLImpl;
import model.bc.vistaNoDML.ParametroViewNoDMLRowImpl;
import model.bc.vistaNoDML.UsuarioViewNoDMLImpl;

import oracle.jbo.JboException;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun May 16 14:02:40 ECT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ModuloImpl extends ModuloAplicacion implements Modulo {

    Map<String, ParametroViewNoDMLRowImpl> mapaParametro;
    //private String indiceModulo;

    /**
     * This is the default constructor (do not remove).
     */
    public ModuloImpl() {
        super();
        setNombreBundle("model.ModelBundle");
        mapaParametro = new HashMap<String, ParametroViewNoDMLRowImpl>();

    }

    /**
     * Metodo para ejecutar excel.
     *
     * Codigo de prueba de ejecucion.
     *
     * @param tabla
     * @param usuario
     * @param usuarioPrograma
     * @return
     */
    public int base_excelCrear(String tabla, String usuario, String usuarioPrograma) {
        int idArchivo = 0;
        String pattern = "yyyy-MM-dd-HH-mm-ssZ";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
        String nombrePagina = "Excel-Prueba-" + usuario + "-" + simpleDateFormat.format(new Date()) + ".xls";

        ResultSet resultSet = this.getBaseDML().ejecutaConsulta("select * from MV_001_00.v_manifiesto vm");
        if (this.getBaseDML().getMensaje() != null) {
            throw new JboException("no consulta SQL");
        }

        idArchivo =
            Reporte.crearReporteExcel(this, resultSet, nombrePagina, getBundle("modulo.indice"), tabla, usuario,
                                      usuarioPrograma);

        return idArchivo;
    }

    /**
     * Metodo para buscar un grupo de excel.
     *
     * @param tabla
     * @param usuario
     * @return
     */
    public int base_excelBuscarArchivos(String esquema, String tabla, String usuario) {


        Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)
            .log(Level.SEVERE, "omar omar " + esquema + " " + tabla + " " + usuario);

        int idUsuario = Reporte.buscarUsuario(this, usuario);

        Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)
            .log(Level.SEVERE, "omar omar idUsuario " + idUsuario + " " + esquema + " " + tabla);

        int idGrupo = Grupo.buscarGrupo(this, idUsuario, esquema, tabla);
        Archivo.buscarArchivosByIdGrupo(this, idGrupo);
        return idGrupo;
    }


    public boolean base_isUsuarioRol(String nick, String rol) {
        return Rol.validarRol(this, nick, rol);
    }

    /**
     * Metodo para conocer un parametro.
     *
     * @param indiceParametro
     * @return
     */
    public String base_obtenerParametroTexto01(String indiceParametro) {
        return obtenerParametro(indiceParametro).getValorTexto01();
    }

    /**
     * Metodo para conocer un parametro.
     *
     * @param indiceParametro
     * @return
     */
    public String base_obtenerParametroTexto02(String indiceParametro) {
        return obtenerParametro(indiceParametro).getValorTexto02();
    }

    /**
     * Metodo para conocer un parametro.
     *
     * @param indiceParametro
     * @return
     */
    public BigDecimal base_obtenerParametroNumerico01(String indiceParametro) {
        return obtenerParametro(indiceParametro).getValorNumero01();
    }

    /**
     * Metodo para conocer un parametro.
     *
     * @param indiceParametro
     * @return
     */
    public BigDecimal base_obtenerParametroNumerico02(String indiceParametro) {
        return obtenerParametro(indiceParametro).getValorNumero02();
    }

    /**
     * Metodo para crear el grupo.
     *
     *
     * @param id
     * @param esquema
     * @param tabla
     * @param largoMaximo
     * @param extensiones
     * @param ancho
     * @param alto
     * @param maximoArchivo
     * @param usuario
     * @param usuarioPrograma
     * @return
     */
    public int base_archivoCrearGrupo(int id, String esquema, String tabla, int largoMaximo, String extensiones,
                                      int ancho, int alto, int maximoArchivo, String usuario, String usuarioPrograma) {
        int codigo = Grupo.buscarGrupo(this, id, esquema, tabla);

        if (codigo == 0) {
            codigo =
                Grupo.crearGrupo(this, id, esquema, tabla, largoMaximo, extensiones, ancho, alto, maximoArchivo,
                                 usuario, usuarioPrograma);
        }

        return codigo;
    }


    /**
     * Metodo para borrar archivos.
     *
     * @param idArchivo
     * @param informacion
     * @param usuario
     * @param usuarioPrograma
     */
    public void base_archivoBorrar(int idArchivo, String informacion, String usuario, String usuarioPrograma) {
        Archivo.borrarArchivo(this, idArchivo, informacion, usuario, usuarioPrograma);
    }

    /**
     * Metodo para crear archivo.
     *
     * @param idGrupo
     * @param nombre
     * @param nombreRamdon
     * @param extension
     * @param pathRelativo
     * @param largo
     * @param informacion
     * @param usuario
     * @param usuarioPrograma
     * @return
     */
    public int base_archivoCrear(int idGrupo, String nombre, String nombreRamdon, String extension, String pathRelativo,
                                 int largo, String informacion, String usuario, String usuarioPrograma) {
        int idArchivo =
            Archivo.crearArchivo(this, idGrupo, nombre, nombreRamdon, extension, pathRelativo, largo, usuario,
                                 usuarioPrograma);

        Archivo.crearEventeoArchivo(this, idArchivo, informacion, Archivo.EVENTO_CARGAR, usuario, usuarioPrograma);
        return idArchivo;
    }

    /**
     * Metodo para enviar notificacion.
     *
     * @param idFormato
     * @param idServicio
     * @param titulo
     * @param contenido
     * @param direccionEnvio
     * @param anular
     * @param fechaEnvio
     * @param usuario
     * @param usuarioPrograma
     * @param mapaParametros
     * @param mapaAdjuntos
     * @return
     */
    public int base_crearNotificacion(int idFormato, int idServicio, String titulo, String contenido, String direccionEnvio,
                                 String anular, Date fechaEnvio, String usuario, String usuarioPrograma,
                                 Map<String, String> mapaParametros, Map<String, String> mapaAdjuntos) {
        int idNotificacion = Notificaciones.enviarNotificacion(this, idFormato, idServicio, titulo, contenido, direccionEnvio, anular,
                                              fechaEnvio, usuario, usuarioPrograma, mapaParametros, mapaAdjuntos);

        return idNotificacion;
    }

    /**
     * Metodo para crear eventos del archivo.
     *
     * @param idArchivo
     * @param evento
     * @param informacion
     * @param usuario
     * @param usuarioPrograma
     * @return
     */
    public int base_archivoCrearEvento(int idArchivo, String evento, String informacion, String usuario,
                                       String usuarioPrograma) {
        return Archivo.crearEventeoArchivo(this, idArchivo, informacion, evento, usuario, usuarioPrograma);
    }

    /**
     * Metodo para alimentar la lista de parametros.
     *
     * @param indiceParametro
     * @return
     */
    private ParametroViewNoDMLRowImpl obtenerParametro(String indiceParametro) {
        ParametroViewNoDMLRowImpl parametroRespuesta = mapaParametro.get(indiceParametro);
        if (parametroRespuesta == null) {
            mapaParametro = Parametros.obtenerParametros(this, getBundle("modulo.indice"));
            parametroRespuesta = mapaParametro.get(indiceParametro);
            if (parametroRespuesta == null) {
                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)
                    .log(Level.SEVERE, "Error Indice=" + indiceParametro + "-" + getBundle("modulo.indice"));
                throw new JboException(getBundle("ModuloImpl.obtenerParametro.txt_1", indiceParametro,
                                                 getBundle("modulo.indice")));
            }
        }
        return parametroRespuesta;
    }

    public ViewObjectImpl getBase_CodigoDefinidoUsuarioViewNoDML1() {
        return (ViewObjectImpl) findViewObject("Base_CodigoDefinidoUsuarioViewNoDML1");
    }

    /**
     * Container's getter for ErrorViewNoDML1.
     * @return ErrorViewNoDML1
     */
    public ViewObjectImpl getBase_ErrorViewNoDML1() {
        return (ViewObjectImpl) findViewObject("Base_ErrorViewNoDML1");
    }

    /**
     * Container's getter for ModuloViewNoDML1.
     * @return ModuloViewNoDML1
     */
    public ViewObjectImpl getBase_ModuloViewNoDML1() {
        return (ViewObjectImpl) findViewObject("Base_ModuloViewNoDML1");
    }

    /**
     * Container's getter for ParametroViewNoDML1.
     * @return ParametroViewNoDML1
     */
    public ViewObjectImpl getBase_ParametroViewNoDML1() {
        return (ViewObjectImpl) findViewObject("Base_ParametroViewNoDML1");
    }

    /**
     * Container's getter for CodigoDefinidoUsuarioViewNoDML2.
     * @return CodigoDefinidoUsuarioViewNoDML2
     */
    public ViewObjectImpl getBase_CodigoDefinidoUsuarioViewNoDML2() {
        return (ViewObjectImpl) findViewObject("Base_CodigoDefinidoUsuarioViewNoDML2");
    }

    /**
     * Container's getter for ParametroViewNoDML2.
     * @return ParametroViewNoDML2
     */
    public ViewObjectImpl getBase_ParametroViewNoDML2() {
        return (ViewObjectImpl) findViewObject("Base_ParametroViewNoDML2");
    }

    /**
     * Container's getter for ModuloCodigoDefinidoUsuarioViewLink1.
     * @return ModuloCodigoDefinidoUsuarioViewLink1
     */
    public ViewLinkImpl getModuloCodigoDefinidoUsuarioViewLink1() {
        return (ViewLinkImpl) findViewLink("ModuloCodigoDefinidoUsuarioViewLink1");
    }

    /**
     * Container's getter for ModuloParametroViewLink1.
     * @return ModuloParametroViewLink1
     */
    public ViewLinkImpl getModuloParametroViewLink1() {
        return (ViewLinkImpl) findViewLink("ModuloParametroViewLink1");
    }

    /**
     * Container's getter for MenusPermisosViewNoDML1.
     * @return MenusPermisosViewNoDML1
     */
    public MenusPermisosViewNoDMLImpl getBase_MenusPermisosViewNoDML1() {
        return (MenusPermisosViewNoDMLImpl) findViewObject("Base_MenusPermisosViewNoDML1");
    }

    /**
     * Container's getter for InformacionViewNoDML1.
     * @return InformacionViewNoDML1
     */
    public InformacionViewNoDMLImpl getBase_InformacionViewNoDML1() {
        return (InformacionViewNoDMLImpl) findViewObject("Base_InformacionViewNoDML1");
    }

    /**
     * Container's getter for UsuarioViewNoDML1.
     * @return UsuarioViewNoDML1
     */
    public UsuarioViewNoDMLImpl getBase_UsuarioViewNoDML1() {
        return (UsuarioViewNoDMLImpl) findViewObject("Base_UsuarioViewNoDML1");
    }


    /**
     * Container's getter for ArchivoEventoView1.
     * @return ArchivoEventoView1
     */
    public VistaObjeto getBase_ArchivoEventoView1() {
        return (VistaObjeto) findViewObject("Base_ArchivoEventoView1");
    }


    /**
     * Container's getter for GrupoView1.
     * @return GrupoView1
     */
    public VistaObjeto getBase_GrupoView1() {
        return (VistaObjeto) findViewObject("Base_GrupoView1");
    }


    /**
     * Container's getter for ArchivoView1.
     * @return ArchivoView1
     */
    public ArchivoViewImpl getBase_ArchivoView1() {
        return (ArchivoViewImpl) findViewObject("Base_ArchivoView1");
    }


    /**
     * Container's getter for ArchivoView1.
     * @return ArchivoView1
     */
    public ArchivoViewImpl getBase_ArchivoView2() {
        return (ArchivoViewImpl) findViewObject("Base_ArchivoView2");
    }

    /**
     * Container's getter for GrupoArchivoFkLink1.
     * @return GrupoArchivoFkLink1
     */
    public ViewLinkImpl getGrupoArchivoFkLink1() {
        return (ViewLinkImpl) findViewLink("GrupoArchivoFkLink1");
    }

    /**
     * Container's getter for NotificacionView1.
     * @return NotificacionView1
     */
    public VistaObjeto getBase_NotificacionView1() {
        return (VistaObjeto) findViewObject("Base_NotificacionView1");
    }


    /**
     * Container's getter for NotificacionParametroView1.
     * @return NotificacionParametroView1
     */
    public VistaObjeto getBase_NotificacionParametroView1() {
        return (VistaObjeto) findViewObject("Base_NotificacionParametroView1");
    }
}
