package model.bc.modulo;import java.sql.Timestamp;import java.util.logging.Level;import java.util.logging.Logger;import model.utilidades.Atributos;import model.bc.ModuloImpl;import model.bc.entidad.ArchivoEventoImpl;import model.bc.entidad.ArchivoImpl;import oracle.jbo.Key;import oracle.jbo.Row;import oracle.jbo.VariableValueManager;import oracle.jbo.ViewCriteria;import oracle.jbo.ViewCriteriaManager;import oracle.jbo.ViewObject;/** * Metodo para el trabajo con los archivos. * * @author omargo33@hotmail.com */public class Archivo {    public static final String EVENTO_CARGAR = "C";    public static final String EVENTO_DESCARGAR = "D";    public static final String EVENTO_ELIMINAR = "X";    /**     * Metodo para crear evento.     *     * @param moduloAplicacion     * @param idArchivo     * @param informacion     * @param tipo     * @param usuario     * @param usuarioPrograma     * @return     */    public static int crearEventeoArchivo(ModuloImpl moduloAplicacion, int idArchivo, String informacion, String tipo,                                          String usuario, String usuarioPrograma) {        int codigo = 0;        boolean estado = true;        ViewObject vo = moduloAplicacion.getBase_ArchivoEventoView1();        Row row = vo.createRow();        row.setAttribute(ArchivoEventoImpl.IDARCHIVO, idArchivo);        row.setAttribute(ArchivoEventoImpl.INFORMACION, Atributos.stringLargo(informacion, Atributos.NO_APLICA, 512));        row.setAttribute(ArchivoEventoImpl.TIPO, Atributos.stringLargo(tipo, Atributos.NO_APLICA, 8));        row.setAttribute(ArchivoEventoImpl.USUARIO, Atributos.stringLargo(usuario, Atributos.NO_APLICA, 128));        row.setAttribute(ArchivoEventoImpl.USUARIOPROGRAMA,                         Atributos.stringLargo(usuarioPrograma, Atributos.NO_APLICA, 256));        row.validate();        vo.insertRow(row);        estado = moduloAplicacion.commitRollback(idArchivo, "crearEventeoArchivo");        if (estado) {            codigo = ((Integer) row.getAttribute(ArchivoEventoImpl.IDARCHIVOEVENTO));        } else {            codigo = -1;        }        return codigo;    }    /**     * Metodo para Crear el archivo subido al sistema.     *     * @param moduloAplicacion     * @param idGrupo     * @param nombre     * @param nombreRamdon     * @param extension     * @param pathRelativo     * @param largo     * @param usuario     * @param usuarioPrograma     * @return     */    public static int crearArchivo(ModuloImpl moduloAplicacion, int idGrupo, String nombre, String nombreRamdon,                                   String extension, String pathRelativo, int largo, String usuario,                                   String usuarioPrograma) {        int codigo = 0;        boolean estado = true;        ViewObject vo = moduloAplicacion.getBase_ArchivoView1();        Row row = vo.createRow();        row.setAttribute(ArchivoImpl.IDGRUPO, idGrupo);        row.setAttribute(ArchivoImpl.NOMBRERAMDON, Atributos.stringLargo(nombreRamdon, Atributos.NO_APLICA, 128));        row.setAttribute(ArchivoImpl.NOMBRE, Atributos.stringLargo(nombre, Atributos.NO_APLICA, 256));        row.setAttribute(ArchivoImpl.EXTENSION, Atributos.stringLargo(extension, Atributos.NO_APLICA, 32));        row.setAttribute(ArchivoImpl.LARGO, largo);        row.setAttribute(ArchivoImpl.PATHRELATIVO, Atributos.stringLargo(pathRelativo, Atributos.NO_APLICA, 512));        row.setAttribute(ArchivoImpl.ESTADO, Atributos.stringLargo("A", Atributos.NO_APLICA, 8));        row.setAttribute(ArchivoImpl.USUARIO, Atributos.stringLargo(usuario, Atributos.NO_APLICA, 128));        row.setAttribute(ArchivoImpl.USUARIOPROGRAMA, Atributos.stringLargo(usuarioPrograma, Atributos.NO_APLICA, 256));        row.validate();        vo.insertRow(row);        estado = moduloAplicacion.commitRollback(nombre, "crearArchivo");        if (estado) {            codigo = ((Integer) row.getAttribute(ArchivoImpl.IDARCHIVO));        } else {            codigo = -1;        }        return codigo;    }    /**     * Metodo para borrar el archivo     *     * @param moduloAplicacion     * @param idArchivo     * @param informacion     * @param usuario     * @param usuarioPrograma     */    public static void borrarArchivo(ModuloImpl moduloAplicacion, int idArchivo, String informacion, String usuario,                                     String usuarioPrograma) {        boolean estado = true;        Key key = new Key(new Object[] { idArchivo });        Row[] rows = moduloAplicacion.getBase_ArchivoView1().findByKey(key, 1);        for (Row r : rows) {            r.setAttribute(ArchivoImpl.ESTADO, "X");            r.setAttribute(ArchivoImpl.USUARIO, Atributos.stringLargo(usuario, Atributos.NO_APLICA, 128));            r.setAttribute(ArchivoImpl.USUARIOPROGRAMA,                           Atributos.stringLargo(usuarioPrograma, Atributos.NO_APLICA, 256));        }        estado = moduloAplicacion.commitRollback(idArchivo, "crearArchivo");        if (estado) {            crearEventeoArchivo(moduloAplicacion, idArchivo, informacion, EVENTO_ELIMINAR, usuario, usuarioPrograma);        }    }    /**     * Metodo para buscar archivos en base al id grupo.     *     * @param moduloAplicacion     * @param idGrupo     */    public static void buscarArchivosByIdGrupo(ModuloImpl moduloAplicacion, int idGrupo) {                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, "omar omar idGrupo " + idGrupo);                java.sql.Timestamp fechaInicio = new Timestamp(new java.util.Date().getTime() - (3 * 60 * 1000));        java.sql.Timestamp fechaFin = new Timestamp(new java.util.Date().getTime() + (5 * 60 * 1000));        ViewObject vo = moduloAplicacion.getBase_ArchivoView1();        ViewCriteriaManager vcm = vo.getViewCriteriaManager();        ViewCriteria vc = vcm.getViewCriteria("ArchivoViewCriteria");        VariableValueManager vvm = vc.ensureVariableManager();        vvm.setVariableValue("v_idGrupo", idGrupo);        vvm.setVariableValue("v_fechaInicio", fechaInicio);        vvm.setVariableValue("v_fechaFin", fechaFin);        vo.applyViewCriteria(vc);        vo.executeQuery();                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, "omar omar omar " + idGrupo);    }}