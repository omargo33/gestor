package model.bc.modulo;import java.sql.Timestamp;import java.util.Date;import java.util.Map;import model.bc.ModuloImpl;import model.bc.entidad.NotificacionImpl;import model.bc.entidad.NotificacionParametroImpl;import model.utilidades.Atributos;import oracle.jbo.Row;import oracle.jbo.ViewObject;/** * Objeto para dar las notificaciones. * * @author omargo33@hotmail.com * */public class Notificaciones {        public static final String NOTIFICACION_ANULAR="S";    public static final String NOTIFICACION_NO_ANULAR="N";    public static final String PARAMETRO="P";    public static final String ADJUNTO="ADJ";    /**     * Metodos para enviar mensajes.     *     * @param moduloAplicacion     * @param mapaParametros     * @return     */    public static int enviarNotificacion(ModuloImpl moduloAplicacion, int idFormato, int idServicio, String titulo,                                         String contenido, String direccionEnvio, String anular, Date fechaEnvio,                                         String usuario, String usuarioPrograma, Map<String, String> mapaParametros,                                         Map<String, String> mapaAdjuntos) {        int idNotificacion =            crearNotificacion(moduloAplicacion, idFormato, idServicio, titulo, contenido, direccionEnvio, anular,                              fechaEnvio, usuario, usuarioPrograma);        if (idNotificacion < 0) {            return idNotificacion;        }        if (mapaParametros != null) {            for (Map.Entry<String, String> entry : mapaParametros.entrySet()) {                crearParametro(moduloAplicacion, idNotificacion, entry.getKey(), entry.getValue(), PARAMETRO);            }        }        if (mapaAdjuntos != null) {            for (Map.Entry<String, String> entry : mapaAdjuntos.entrySet()) {                crearParametro(moduloAplicacion, idNotificacion, entry.getKey(), entry.getValue(), ADJUNTO);            }        }/*        moduloAplicacion.getBaseDML()            .ejecutaDML("UPDATE GA_001_00.notificacion SET estado = 'P' WHERE id_notificacion = ?", idNotificacion);*/        return idNotificacion;    }    /**     * Metodo para crear parametro.     *     * @param moduloAplicacion     * @param idNotificacion     * @param llave     * @param valor     * @param tipo     * @return     */    private static int crearParametro(ModuloImpl moduloAplicacion, int idNotificacion, String llave, String valor,                                      String tipo) {        int codigo = -1;        ViewObject vo = moduloAplicacion.getBase_NotificacionParametroView1();        Row row = vo.createRow();        row.setAttribute(NotificacionParametroImpl.IDNOTIFICACION, idNotificacion);        row.setAttribute(NotificacionParametroImpl.LLAVE, Atributos.stringLargo(llave, Atributos.NO_APLICA, 64));        row.setAttribute(NotificacionParametroImpl.VALOR, Atributos.stringLargo(valor, Atributos.NO_APLICA, 512));        row.setAttribute(NotificacionParametroImpl.TIPO, Atributos.stringLargo(tipo, Atributos.NO_APLICA, 8));        row.validate();        vo.insertRow(row);        if (moduloAplicacion.commitRollback(codigo, "crearParametro")) {            codigo = ((Integer) row.getAttribute(NotificacionParametroImpl.IDNOTIFICACIONPARAMETRO));        }        return codigo;    }    /**     * Metodo para crear una notificacion.     *     * @param moduloAplicacion     * @param idFormato     * @param idServicio     * @param titulo     * @param contenido     * @param direccionEnvio     * @param anular     * @param fechaEnvio     * @param usuario     * @param usuarioPrograma     * @return     */    private static int crearNotificacion(ModuloImpl moduloAplicacion, int idFormato, int idServicio, String titulo,                                         String contenido, String direccionEnvio, String anular, Date fechaEnvio,                                         String usuario, String usuarioPrograma) {        int codigo = -1;        Timestamp time = new Timestamp(fechaEnvio.getTime());        ViewObject vo = moduloAplicacion.getBase_NotificacionView1();        Row row = vo.createRow();        row.setAttribute(NotificacionImpl.IDFORMATO, idFormato);        row.setAttribute(NotificacionImpl.IDSERVICIO, idServicio);        row.setAttribute(NotificacionImpl.TITULO, Atributos.stringLargo(titulo, Atributos.NO_APLICA, 256));        row.setAttribute(NotificacionImpl.CONTENIDO, Atributos.stringLargo(contenido, Atributos.NO_APLICA, 4096));        row.setAttribute(NotificacionImpl.DIRECCIONENVIO,                         Atributos.stringLargo(direccionEnvio, Atributos.NO_APLICA, 256));        row.setAttribute(NotificacionImpl.ESTADO, Atributos.stringLargo("P", Atributos.NO_APLICA, 8));        row.setAttribute(NotificacionImpl.ANULAR, Atributos.stringLargo(anular, Atributos.NO_APLICA, 8));        row.setAttribute(NotificacionImpl.FECHAENVIO, time);        row.setAttribute(NotificacionImpl.USUARIO, Atributos.stringLargo(usuario, Atributos.NO_APLICA, 128));        row.setAttribute(NotificacionImpl.USUARIOPROGRAMA,                         Atributos.stringLargo(usuarioPrograma, Atributos.NO_APLICA, 256));        row.validate();        vo.insertRow(row);        if (moduloAplicacion.commitRollback(codigo, "crearNotificacion")) {            codigo = ((Integer) row.getAttribute(NotificacionImpl.IDNOTIFICACION));        }        return codigo;    }}